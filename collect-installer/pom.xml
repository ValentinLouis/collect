<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.openforis.collect</groupId>
		<artifactId>collect</artifactId>
		<version>3.12.29-SNAPSHOT</version>
	</parent>
	<artifactId>collect-installer</artifactId>
	<packaging>pom</packaging>
	<name>Open Foris Collect Installer</name>
	<description>Module to create the installers for Open Foris Collect</description>

	<properties>
		<!-- to avoid replacing relative path to images and other resources used 
			by the installer -->
		<installer-build-path>${project.build.directory}/installer</installer-build-path>
		<installbuilder-file-name>installbuilder.xml</installbuilder-file-name>
		<jre.version.major>1.8</jre.version.major>
		<jre.version>1.8.0</jre.version>
		<jre.version.full>1.8.0_121</jre.version.full>
		<!-- installer file names -->
		<windows-installer-file-name>OpenForisCollect-${installer-version-id}-windows-installer.exe</windows-installer-file-name>
		<linux-installer-file-name>OpenForisCollect-${installer-version-id}-linux-installer.run</linux-installer-file-name>
		<linux-x64-installer-file-name>OpenForisCollect-${installer-version-id}-linux-x64-installer.run</linux-x64-installer-file-name>
		<osx-installer-file-name>OpenForisCollect-${installer-version-id}-osx-installer.dmg</osx-installer-file-name>
		<!-- autoupdate file names -->
		<windows-autoupdater-file-name>autoupdate-windows.exe</windows-autoupdater-file-name>
		<linux-autoupdater-file-name>autoupdate-linux.run</linux-autoupdater-file-name>
		<linux-x64-autoupdater-file-name>autoupdate-linux-x64.run</linux-x64-autoupdater-file-name>
		<osx-autoupdater-file-name>autoupdate-osx.app.zip</osx-autoupdater-file-name>
	</properties>

	<build>
		<plugins>
			<!-- 1. extract jre into build folder, copy autoupdater and contolpanel  -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>2.6</version>
				<executions>
					<execution>
						<id>unpack-jre</id>
						<phase>process-sources</phase>
						<goals>
							<goal>unpack</goal>
						</goals>
						<configuration>
							<artifactItems>
								<artifactItem>
									<groupId>com.oracle.java</groupId>
									<artifactId>jre</artifactId>
									<version>${jre.version.full}</version>
									<classifier>linux</classifier>
									<type>zip</type>
									<overWrite>false</overWrite>
									<outputDirectory>${installer-build-path}/jre_files</outputDirectory>
								</artifactItem>
								<artifactItem>
									<groupId>com.oracle.java</groupId>
									<artifactId>jre</artifactId>
									<version>${jre.version.full}</version>
									<classifier>linux-x64</classifier>
									<type>zip</type>
									<overWrite>false</overWrite>
									<outputDirectory>${installer-build-path}/jre_files</outputDirectory>
								</artifactItem>
								<artifactItem>
									<groupId>com.oracle.java</groupId>
									<artifactId>jre</artifactId>
									<version>${jre.version.full}</version>
									<classifier>osx</classifier>
									<type>zip</type>
									<overWrite>false</overWrite>
									<outputDirectory>${installer-build-path}/jre_files</outputDirectory>
								</artifactItem>
								<artifactItem>
									<groupId>com.oracle.java</groupId>
									<artifactId>jre</artifactId>
									<version>${jre.version.full}</version>
									<classifier>windows-i386</classifier>
									<type>zip</type>
									<overWrite>false</overWrite>
									<outputDirectory>${installer-build-path}/jre_files</outputDirectory>
								</artifactItem>
								<artifactItem>
									<groupId>com.oracle.java</groupId>
									<artifactId>jre</artifactId>
									<version>${jre.version.full}</version>
									<classifier>windows-x64</classifier>
									<type>zip</type>
									<overWrite>false</overWrite>
									<outputDirectory>${installer-build-path}/jre_files</outputDirectory>
								</artifactItem>
							</artifactItems>
						</configuration>
					</execution>
					<execution>
						<id>copy-artifacts</id>
						<phase>process-sources</phase>
						<goals>
							<goal>copy</goal>
						</goals>
						<configuration>
							<artifactItems>
								<artifactItem>
									<groupId>org.openforis.collect</groupId>
									<artifactId>collect-autoupdater</artifactId>
									<version>${project.version}</version>
									<classifier>windows</classifier>
									<type>exe</type>
									<overWrite>false</overWrite>
									<outputDirectory>${installer-build-path}</outputDirectory>
									<destFileName>${windows-autoupdater-file-name}</destFileName>
								</artifactItem>
								<artifactItem>
									<groupId>org.openforis.collect</groupId>
									<artifactId>collect-autoupdater</artifactId>
									<version>${project.version}</version>
									<classifier>linux</classifier>
									<type>run</type>
									<overWrite>false</overWrite>
									<outputDirectory>${installer-build-path}</outputDirectory>
									<destFileName>${linux-autoupdater-file-name}</destFileName>
								</artifactItem>
								<artifactItem>
									<groupId>org.openforis.collect</groupId>
									<artifactId>collect-autoupdater</artifactId>
									<version>${project.version}</version>
									<classifier>linux-x64</classifier>
									<type>run</type>
									<overWrite>false</overWrite>
									<outputDirectory>${installer-build-path}</outputDirectory>
									<destFileName>${linux-x64-autoupdater-file-name}</destFileName>
								</artifactItem>
								<artifactItem>
									<groupId>org.openforis.collect</groupId>
									<artifactId>collect-autoupdater</artifactId>
									<version>${project.version}</version>
									<classifier>osx</classifier>
									<type>zip</type>
									<overWrite>false</overWrite>
									<outputDirectory>${installer-build-path}</outputDirectory>
									<destFileName>${osx-autoupdater-file-name}</destFileName>
								</artifactItem>
								<!-- Collect WebApp -->
								<artifactItem>
									<groupId>org.openforis.collect</groupId>
									<artifactId>collect-webapp-jetty</artifactId>
									<version>${project.version}</version>
									<type>war</type>
									<overWrite>false</overWrite>
									<outputDirectory>${installer-build-path}/webapps</outputDirectory>
									<destFileName>collect.war</destFileName>
								</artifactItem>
								<!-- Saiku WebApp -->
								<artifactItem>
									<groupId>meteorite.bi</groupId>
									<artifactId>saiku-webapp-full</artifactId>
									<version>2.6</version>
									<type>war</type>
									<overWrite>false</overWrite>
									<outputDirectory>${installer-build-path}/webapps</outputDirectory>
									<destFileName>saiku.war</destFileName>
								</artifactItem>
								<!-- Libraries -->
								<artifactItem>
									<groupId>commons-dbcp</groupId>
									<artifactId>commons-dbcp</artifactId>
									<version>1.4</version>
									<type>jar</type>
									<overWrite>false</overWrite>
									<outputDirectory>${installer-build-path}/lib</outputDirectory>
								</artifactItem>
								<artifactItem>
									<groupId>commons-pool</groupId>
									<artifactId>commons-pool</artifactId>
									<version>1.5.4</version>
									<type>jar</type>
									<overWrite>false</overWrite>
									<outputDirectory>${installer-build-path}/lib</outputDirectory>
								</artifactItem>
								<artifactItem>
									<groupId>com.h2database</groupId>
									<artifactId>h2</artifactId>
									<version>1.4.193</version>
									<type>jar</type>
									<overWrite>false</overWrite>
									<outputDirectory>${installer-build-path}/lib</outputDirectory>
								</artifactItem>
								<artifactItem>
									<groupId>org.xerial</groupId>
									<artifactId>sqlite-jdbc</artifactId>
									<version>3.7.2</version>
									<type>jar</type>
									<overWrite>false</overWrite>
									<outputDirectory>${installer-build-path}/lib</outputDirectory>
								</artifactItem>
								<artifactItem>
									<groupId>postgresql</groupId>
									<artifactId>postgresql</artifactId>
									<version>9.1-901.jdbc4</version>
									<type>jar</type>
									<overWrite>false</overWrite>
									<outputDirectory>${installer-build-path}/lib</outputDirectory>
								</artifactItem>
							</artifactItems>
						</configuration>
					</execution>
					<execution>
						<id>copy-control-panel-dependencies</id>
						<phase>process-sources</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<outputDirectory>${installer-build-path}/lib</outputDirectory>
							<includeScope>compile</includeScope>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- 2. copy resource files -->
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.6</version>
				<executions>
					<execution>
						<id>copy-installbuilder-source-file</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${installer-build-path}</outputDirectory>
							<resources>
								<resource>
									<directory>src/main/resources</directory>
									<includes>
										<include>**</include>
									</includes>
								</resource>
							</resources>
							<overwrite>true</overwrite>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- 3. replace application version into the InstallBuilder XML source file
					replace Java version into the InstallBuilder java.xml file -->
			<plugin>
				<groupId>com.google.code.maven-replacer-plugin</groupId>
				<artifactId>maven-replacer-plugin</artifactId>
				<version>1.4.0</version>
				<executions>
					<execution>
						<phase>prepare-package</phase>
						<goals>
							<goal>replace</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<basedir>${installer-build-path}</basedir>
					<includes>
						<include>${installbuilder-file-name}</include>
						<include>java.xml</include>
					</includes>
					<regex>false</regex>
					<replacements>
						<replacement>
							<token>VERSION_ID</token>
							<value>${installer-version-id}</value>
						</replacement>
						<replacement>
							<token>UPDATE_XML_URL</token>
							<value>${collect.update_2.url}</value>
						</replacement>
						<replacement>
							<token><![CDATA[%JRE_VERSION_FULL%]]></token>
							<value>${jre.version.full}</value>
						</replacement>
						<replacement>
							<token><![CDATA[%JRE_VERSION_MAJOR%]]></token>
							<value>${jre.version.major}</value>
						</replacement>
						<replacement>
							<token><![CDATA[%JRE_VERSION%]]></token>
							<value>${jre.version}</value>
						</replacement>
					</replacements>
				</configuration>
			</plugin>
			
			<!-- 4. execute installbuilder to produce the installers -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>1.1</version>
				<executions>
					<!-- Linux -->
					<execution>
						<id>linux-installer</id>
						<phase>package</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>${installbuilder-home}/bin/builder</executable>
							<arguments>
								<argument>build</argument>
								<argument>${installer-build-path}/${installbuilder-file-name}</argument>
								<argument>linux</argument>
							</arguments>
						</configuration>
					</execution>
					<!-- Linux x64 -->
					<execution>
						<id>linux-x64-installer</id>
						<phase>package</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>${installbuilder-home}/bin/builder</executable>
							<arguments>
								<argument>build</argument>
								<argument>${installer-build-path}/${installbuilder-file-name}</argument>
								<argument>linux-x64</argument>
							</arguments>
						</configuration>
					</execution>
					<!-- Windows -->
					<execution>
						<id>windows-installer</id>
						<phase>package</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>${installbuilder-home}/bin/builder</executable>
							<arguments>
								<argument>build</argument>
								<argument>${installer-build-path}/${installbuilder-file-name}</argument>
								<argument>windows</argument>
							</arguments>
						</configuration>
					</execution>
					<!-- OS X -->
					<execution>
						<id>osx-installer</id>
						<phase>package</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>${installbuilder-home}/bin/builder</executable>
							<arguments>
								<argument>build</argument>
								<argument>${installer-build-path}/${installbuilder-file-name}</argument>
								<argument>osx</argument>
							</arguments>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- 5. move generated installers into the target folder -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>
					<execution>
						<id>run-ant-move-installer-files</id>
						<phase>package</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<tasks>
								<move file="${installbuilder-home}/output/${windows-installer-file-name}" tofile="${project.build.directory}/${windows-installer-file-name}" failonerror="true" />
								<move file="${installbuilder-home}/output/${linux-installer-file-name}" tofile="${project.build.directory}/${linux-installer-file-name}" failonerror="true" />
								<move file="${installbuilder-home}/output/${linux-x64-installer-file-name}" tofile="${project.build.directory}/${linux-x64-installer-file-name}" failonerror="true" />
								<move file="${installbuilder-home}/output/${osx-installer-file-name}" tofile="${project.build.directory}/${osx-installer-file-name}" failonerror="true" />
							</tasks>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- 6. attach installers as artifact -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>attach-installer-artifacts</id>
						<phase>package</phase>
						<goals>
							<goal>attach-artifact</goal>
						</goals>
						<configuration>
							<artifacts>
								<artifact>
									<file>${project.build.directory}/${windows-installer-file-name}</file>
									<classifier>windows</classifier>
									<type>exe</type>
								</artifact>
								<artifact>
									<file>${project.build.directory}/${linux-installer-file-name}</file>
									<classifier>linux</classifier>
									<type>run</type>
								</artifact>
								<artifact>
									<file>${project.build.directory}/${linux-x64-installer-file-name}</file>
									<classifier>linux-x64</classifier>
									<type>run</type>
								</artifact>
								<artifact>
									<file>${project.build.directory}/${osx-installer-file-name}</file>
									<classifier>osx</classifier>
									<type>dmg</type>
								</artifact>
							</artifacts>
						</configuration>
					</execution>
				</executions>
			</plugin>

		</plugins>
	</build>
	
	<dependencies>
		<dependency>
			<groupId>org.openforis.collect</groupId>
			<artifactId>collect-control-panel</artifactId>
			<version>${project.version}</version>
		</dependency>
	</dependencies>
</project>