/**
 * Generated by Gas3 v2.2.0 (Granite Data Services).
 *
 * NOTE: this file is only generated if it does not exist. You may safely put
 * your custom code here.
 */

package org.openforis.collect.model.proxy {
	import flash.utils.Dictionary;
	
	import mx.collections.ArrayCollection;
	import mx.collections.IList;
	import mx.collections.ListCollectionView;
	
	import org.openforis.collect.event.ApplicationEvent;
	import org.openforis.collect.event.EventDispatcherFactory;
	import org.openforis.collect.metamodel.proxy.NodeDefinitionProxy;
	import org.openforis.collect.metamodel.proxy.SurveyProxy;
	import org.openforis.collect.util.ArrayUtil;

    [Bindable]
    [RemoteClass(alias="org.openforis.collect.model.proxy.RecordProxy")]
    public class RecordProxy extends RecordProxyBase {
		
		private var _survey:SurveyProxy;
		private var _nodesMap:Dictionary;
		private var _updated:Boolean = false;
		
		private var validationResults:ValidationResultsProxy;

		public function RecordProxy():void {
			super();
		}
		
		public function init():void {
			_nodesMap = new Dictionary();
			traverse(associateDefinition);
			traverse(initNode);
		}
		
		/**
		 * Traverse all the record's nodes and execute the argument function passing
		 * the visited node to it
		 * */
		public function traverse(funct:Function):void {
			if ( rootEntity != null ) {
				funct(rootEntity);
				rootEntity.traverse(funct);
			}
		}
		
		protected function associateDefinition(node:NodeProxy):void {
			var defn:NodeDefinitionProxy = survey.schema.getDefinitionById(node.definitionId);
			node.definition = defn;
		}
		
		protected function initNode(node:NodeProxy):void {
			_nodesMap[node.id] = node;
			node.init();
		}
		
		public function getNode(id:int):NodeProxy {
			return _nodesMap[id];
		}
		
		public function update(responseSet:RecordUpdateResponseSetProxy, requestSet:RecordUpdateRequestSetProxy):void {
			updateNodes(requestSet);
			this.skipped = responseSet.skipped;
			this.missing = responseSet.missing;
			this.missingErrors = responseSet.missingErrors;
			this.missingWarnings = responseSet.missingWarnings;
			this.warnings = responseSet.warnings;
			for each (var response:NodeUpdateResponseProxy in responseSet.responses)	{
				processResponse(response);
			}
			_updated = true;
			var appEvt:ApplicationEvent = new ApplicationEvent(ApplicationEvent.UPDATE_RESPONSE_RECEIVED);
			appEvt.result = responseSet;
			EventDispatcherFactory.getEventDispatcher().dispatchEvent(appEvt);
		}
		
		private function updateNodes(reqSet:RecordUpdateRequestSetProxy):void {
			var requests:ListCollectionView = reqSet.requests;
			var attr:AttributeProxy;
			var field:FieldProxy;
			for each (var reqOp:RecordUpdateRequestProxy in requests) {
				if ( reqOp is RemarksUpdateRequestProxy ) {
					var updRemarksReq:RemarksUpdateRequestProxy = RemarksUpdateRequestProxy(reqOp);
					attr = getNode(updRemarksReq.nodeId) as AttributeProxy;
					field = attr.getField(updRemarksReq.fieldIndex);
					field.remarks = updRemarksReq.remarks;
				} else if ( reqOp is FieldUpdateRequestProxy ) {
					var updFieldReq:FieldUpdateRequestProxy = FieldUpdateRequestProxy(reqOp);
					attr = getNode(updFieldReq.nodeId) as AttributeProxy;
					field = attr.getField(updFieldReq.fieldIndex);
					field.symbol = updFieldReq.symbol;
					field.remarks = updFieldReq.remarks;
				} else if ( reqOp is AttributeUpdateRequestProxy ) {
					var updAttrReq:AttributeUpdateRequestProxy = AttributeUpdateRequestProxy(reqOp);
					attr = getNode(updAttrReq.nodeId) as AttributeProxy;
					for each (field in attr.fields) {
						field.symbol = updAttrReq.symbol;
						field.remarks = updAttrReq.remarks;
					}
				} else if ( reqOp is DefaultValueApplyRequestProxy ) {
					attr = getNode(DefaultValueApplyRequestProxy(reqOp).nodeId) as AttributeProxy;
					for each (field in attr.fields) {
						field.symbol = null;
					}
				} else if ( reqOp is ConfirmErrorRequestProxy ) {
					attr = getNode(ConfirmErrorRequestProxy(reqOp).nodeId) as AttributeProxy;
					if ( attr != null ) {
						attr.errorConfirmed = true;
					}
				}
			}
		}
		
		private function processResponse(response:NodeUpdateResponseProxy):void {
			if ( response is NodeAddResponseProxy ) {
				processNodeAddResponse(NodeAddResponseProxy(response));
			}
			if ( response is NodeDeleteResponseProxy ) {
				processNodeDeleteResponse(NodeDeleteResponseProxy(response));
			} else if ( response is AttributeUpdateResponseProxy ) {
				processAttributeUpdateResponse(AttributeUpdateResponseProxy(response));
			} else if ( response is EntityUpdateResponseProxy ) {
				processEntityUpdateResponse(EntityUpdateResponseProxy(response));
			}
		}
		
		protected function processNodeAddResponse(response:NodeAddResponseProxy):void {
			var node:NodeProxy = NodeAddResponseProxy(response).createdNode;
			associateDefinition(node);
			if ( node is EntityProxy ) {
				EntityProxy(node).traverse(associateDefinition);
			}
			var parent:EntityProxy = getNode(node.parentId) as EntityProxy;
			parent.addChild(node);
			node.parent = parent;
			initNode(node);
			if(node is EntityProxy) {
				EntityProxy(node).traverse(initNode);
			}
		}
		
		protected function processNodeDeleteResponse(response:NodeDeleteResponseProxy):void {
			if ( response.deletedNodeId > 0 ) {
				var node:NodeProxy = getNode(response.deletedNodeId);
				if (node != null ) {
					var parent:EntityProxy = getNode(node.parentId) as EntityProxy;
					parent.removeChild(node);
					_nodesMap[node.id] = null;
				}
			}
		}
		
		protected function processAttributeUpdateResponse(response:AttributeUpdateResponseProxy):void {
			var node:NodeProxy = getNode(response.nodeId);
			var a:AttributeProxy = AttributeProxy(node);
			if ( response.validationResults != null ) {
				a.validationResults = response.validationResults;
			}
			if ( response.updatedFieldValues != null ) {
				var fieldIdxs:ArrayCollection = response.updatedFieldValues.keySet;
				for each (var i:int in fieldIdxs) {
					var f:FieldProxy = a.getField(i);
					f.value = response.updatedFieldValues.get(i);
				}
				a.errorConfirmed = false;
				var parent:EntityProxy = getNode(node.parentId) as EntityProxy;
				parent.updateKeyText();
			}
		}
		
		protected function processEntityUpdateResponse(response:EntityUpdateResponseProxy):void {
			var node:NodeProxy = getNode(response.nodeId);
			var e:EntityProxy = node as EntityProxy;
			if ( response.maxCountValidation != null && response.maxCountValidation.length > 0 ) {
				e.updateChildrenMaxCountValiditationMap(response.maxCountValidation);
			}
			if ( response.minCountValidation != null && response.minCountValidation.length > 0 ) {
				e.updateChildrenMinCountValiditationMap(response.minCountValidation);
			}
			if ( response.relevant != null && response.relevant.length > 0 ) {
				e.updateChildrenRelevanceMap(response.relevant);
			}
			if ( response.required != null && response.required.length > 0 ) {
				e.updateChildrenRequiredMap(response.required);
			}
		}
		
		public function showErrors():void {
			var stack:Array = new Array();
			stack.push(rootEntity);
			while ( stack.length > 0 ) {
				var entity:EntityProxy = stack.pop();
				var childDefinitionNames:IList = entity.childDefinitionNames;
				for each (var name:String in childDefinitionNames) {
					entity.showChildrenErrorsMap.put(name, true);
				}
				var childrenEntities:IList = entity.getChildEntities();
				ArrayUtil.addAll(stack, childrenEntities.toArray());
			}
		}
		
		public function get survey():SurveyProxy {
			return _survey;
		}
		
		public function set survey(value:SurveyProxy):void {
			_survey = value;
		}
		
		public function get updated():Boolean {
			return _updated;
		}
		
		public function set updated(value:Boolean):void {
			 _updated = value;
		}
    }
}