/**
 * Generated by Gas3 v2.2.0 (Granite Data Services).
 *
 * NOTE: this file is only generated if it does not exist. You may safely put
 * your custom code here.
 */

package org.openforis.collect.model.proxy {
	import mx.collections.IList;
	
	import org.openforis.collect.metamodel.proxy.NodeDefinitionProxy;
	import org.openforis.collect.util.MathUtil;

	/**
	 * @author S. Ricci
	 */
    [Bindable]
    [RemoteClass(alias="org.openforis.collect.model.proxy.NodeProxy")]
    public class NodeProxy extends NodeProxyBase {
		
		private var _definition:NodeDefinitionProxy;
		private var _index:int;
		
		public function init():void {
			updateIndex();
			setParentReferencesOnChildren();
		}

		public function hasErrors():Boolean {
			return false;
		}
		
		public function get empty():Boolean {
			return true;
		}
		
		public function get index():int {
			return _index;
		}
		
		public function set index(value:int):void {
			_index = value;
		}
		
		public function updateIndex():void {
			index = calculateIndex();
		}
		
		protected function calculateIndex():int {
			if ( parent == null ) {
				return 0;
			} else {
				var children:IList = parent.getChildren(name);
				var idx:int = children.getItemIndex(this);
				return idx;
			}
		}
		
		public function getNextSibling(offset:int = 1):NodeProxy {
			return getSibling(offset);
		}
		
		public function getPreviousSibling(offset:int = 1):NodeProxy {
			return getSibling(-offset);
		}

		public function getSibling(offset:int, circularLookup:Boolean = false):NodeProxy {
			var result:NodeProxy = null;
			var siblings:IList = getSiblings();
			if ( siblings != null ) {
				var itemIndex:int = siblings.getItemIndex(this);
				var numSiblings:int = siblings.length;
				var resultIndex:int = itemIndex + offset;
				if ( circularLookup ) {
					resultIndex = MathUtil.module(resultIndex, numSiblings);
				} else if ( resultIndex < 0 ) {
					resultIndex = 0;
				} else if ( resultIndex >= numSiblings ) {
					resultIndex = numSiblings - 1;
				}
				if ( resultIndex != itemIndex ) {
					result = NodeProxy(siblings.getItemAt(resultIndex));
				}
			}
			return result;
		}
		
		protected function setParentReferencesOnChildren():void {
			//to be implemented in subclasses
		}
		
		public function getParentMultipleEntity():EntityProxy {
			var currentParent:EntityProxy = parent;
			while ( currentParent != null ) {
				if ( currentParent.definition.multiple ) {
					return currentParent;
				}
				currentParent = currentParent.parent;
			}
			return null;
		}
		
		public function getSiblings():IList {
			if ( parent != null ) {
				var result:IList = parent.getChildren(name);
				return result;
			} else {
				return null;
			}
		}
		
		public function get definition():NodeDefinitionProxy {
			return _definition;
		}
		
		public function set definition(value:NodeDefinitionProxy):void {
			_definition = value;
		}
		
    }

}
