<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx"
				width="100%" autoDrawBackground="false"
				dragEnter="dragEnterHandler(event)"
				dragExit="dragExitHandler(event)"
				dragOver="dragOverHandler(event)"
				dragDrop="dragDropHandler(event)"
				mouseDown="mouseDownHandler(event)"
				mouseUp="mouseUpHandler(event)"
				mouseMove="mouseMoveHandler(event)"
				>
	<fx:Script>
		<![CDATA[
			import mx.core.DragSource;
			import mx.events.DragEvent;
			import mx.managers.DragManager;
			
			import org.openforis.collect.metamodel.proxy.CodeListItemProxy;
			import org.openforis.collect.util.UIUtil;
			
			public static const STATE_NORMAL:String = "normal";
			public static const STATE_DROPPING_TOP:String = "droppingTop";
			public static const STATE_DROPPING_BOTTOM:String = "droppingBottom";
			
			private var dragPrepared:Boolean = false;
			
			private function textInputChangeHandler(event:Event):void {
				data.qualifier = textInput.text;
			}
			
			private function checkBoxChangeHandler(event:Event):void {
				var item:CodeListItemProxy = data as CodeListItemProxy;
				item.selected = checkBox.selected;
				CodeListDialogDataGroup(owner).selectionChangeHandler(item);
			}
			
			[Bindable(event="dataChange")]
			override public function get label():String {
				var item:CodeListItemProxy = CodeListItemProxy(data);
				var label:String = item.code + " - " + item.getLabelText();
				return label;
			}
		
			protected function mouseMoveHandler(event:MouseEvent):void {
				if (dragPrepared) {
					var ds:DragSource = new DragSource();
					DragManager.doDrag(this, ds, event);
				}
			}
			
			/**
			 * Called when the user moves the drag indicator onto the drop target.
			 */
			protected function dragEnterHandler(event:DragEvent):void {
				var dragInitiator:ItemRenderer = event.dragInitiator as ItemRenderer;
				var dropTarget:ItemRenderer = ItemRenderer(event.currentTarget);
				
				// Accept the drag if dragged attribute is relative to the same form item
				if ( dragInitiator != null && dragInitiator.owner == dropTarget.owner) {
					DragManager.acceptDragDrop(dropTarget);
				}
			}
			
			/**
			 * Called if the target accepts the dragged object and the user 
			 * releases the mouse button while over another ItemRenderer.
			 */ 
			protected function dragExitHandler(event:DragEvent):void {
				hideDropIndicator();
			}
			
			protected function dragOverHandler(event:DragEvent):void {
				if ( event.dragInitiator != null && event.dragInitiator.owner == event.currentTarget.owner ) { 
					showDropIndicator(event);
				}
			}
			
			protected function dragDropHandler(event:DragEvent):void {
				var dragInitiator:ItemRenderer = ItemRenderer(event.dragInitiator);
				var indexFrom:int = dragInitiator.itemIndex;
				var indexTo:int;
				if ( isDropOnTopOfElement(event.localY) ) {
					indexTo = itemIndex;
				} else {
					indexTo = itemIndex + 1;
				}
				if ( indexFrom < indexTo ) {
					//the node in index from will be deleted and the other nodes will shift
					//so the final index has to be decreased
					indexTo--;
				}
				if ( indexFrom != indexTo ) {
					var dragItem:CodeListItemProxy = CodeListItemProxy(dragInitiator.data);
					CodeListDialogDataGroup(owner).itemsOrderChangeHandler(dragItem, indexTo);
				}
				hideDropIndicator();
			}
			
			protected function showDropIndicator(event:DragEvent):void {
				if(isDropOnTopOfElement(event.localY)) {
					currentState = STATE_DROPPING_TOP;
				} else {
					currentState = STATE_DROPPING_BOTTOM;
				}
			}
			
			protected function hideDropIndicator():void {
				currentState = STATE_NORMAL;
			}
			
			protected function isDropOnTopOfElement(y:Number):Boolean {
				return y <= (this.height / 2) + 5;
			}
			
			protected function mouseDownHandler(event:MouseEvent):void {
				if (CodeListDialogDataGroup(owner).sortable && ! DragManager.isDragging ) {
					dragPrepared = true;
				}
			}
			
			protected function mouseUpHandler(event:MouseEvent):void {
				dragPrepared = false;
			}
			
			protected function checkBoxKeyDownHandler(event:KeyboardEvent):void {
				switch ( event.keyCode ) {
				case Keyboard.ENTER:
					CodeListDialogDataGroup(owner).dispatchEvent(new Event("apply"));
					break;
				case Keyboard.DOWN:
					var ckeckBox:CheckBox = CheckBox(event.target);
					UIUtil.moveFocus(false, checkBox.focusManager);
					break;
				case Keyboard.UP:
					UIUtil.moveFocus(true, checkBox.focusManager);
					break;
				}
			}
			
			protected function checkBoxFocusInHandler(event:FocusEvent):void {
				UIUtil.ensureElementIsVisible(event.target);
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="normal"/>
		<s:State name="hovered"/>
		<s:State name="selected"/>
		
		<s:State name="droppingTop"/>
		<s:State name="droppingBottom"/>
	</s:states>
	
	<s:layout>
		<s:VerticalLayout horizontalAlign="center" verticalAlign="middle"
						  gap="0"
						  paddingBottom="0" paddingRight="0" paddingLeft="0" paddingTop="0" />
	</s:layout>
	
	<s:Line id="dropIndicatorTop" includeIn="droppingTop" width="100%">
		<s:stroke>
			<s:SolidColorStroke color="#0000EE" weight="2"/>
		</s:stroke>
	</s:Line>
	
	<s:HGroup verticalAlign="middle" horizontalAlign="left"
			  gap="0" width="100%"
			  paddingBottom="0" paddingRight="0" paddingLeft="0" paddingTop="0">
		
		<s:CheckBox id="checkBox" 
					enabled="{parentDocument.editable}"
					selected="{data.selected}" 
					label="{label}" 
					change="checkBoxChangeHandler(event)" 
					keyDown="checkBoxKeyDownHandler(event)"
					focusIn="checkBoxFocusInHandler(event)"
					/>
		
		<mx:TextInput height="20" id="textInput" 
					  visible="{data.qualifiable}" 
					  includeInLayout="{data.qualifiable}"
					  enabled="{checkBox.selected}"
					  text="{data.qualifier}"
					  change="textInputChangeHandler(event)"
					  />
	</s:HGroup>
	
	<s:Line id="dropIndicatorBottom" includeIn="droppingBottom" width="100%">
		<s:stroke>
			<s:SolidColorStroke color="#0000EE" weight="2"/>
		</s:stroke>
	</s:Line>
	
</s:ItemRenderer>
