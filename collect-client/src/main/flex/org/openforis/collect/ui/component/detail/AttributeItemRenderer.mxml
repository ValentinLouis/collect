<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer 
				xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx"
				creationComplete="creationCompleteHandler(event)"
				minHeight="0"
				minWidth="0"
				>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.IList;
			import mx.events.FlexEvent;
			
			import org.openforis.collect.metamodel.proxy.AttributeDefinitionProxy;
			import org.openforis.collect.metamodel.proxy.ModelVersionProxy;
			import org.openforis.collect.metamodel.ui.proxy.AttributeModelObjectProxy;
			import org.openforis.collect.metamodel.ui.proxy.FieldProxy;
			import org.openforis.collect.metamodel.ui.proxy.TableProxy;
			import org.openforis.collect.metamodel.ui.proxy.UIModelObjectProxy;
			import org.openforis.collect.model.proxy.AttributeProxy;
			import org.openforis.collect.model.proxy.EntityProxy;
			import org.openforis.collect.presenter.AttributePresenter;
			import org.openforis.collect.util.UIUtil;
			
			import spark.components.BorderContainer;
			
			public static const STYLE_NAME_NORMAL:String = "normal";
			public static const STYLE_NAME_DISABLED:String = "disabled";
			public static const STYLE_NAME_APPROVED:String = "approved";
			

			private var _direction:String;
			private var _attributeUIModelObject:AttributeModelObjectProxy;
			private var _modelVersion:ModelVersionProxy;
			private var _parentEntity:EntityProxy;
			private var _attribute:AttributeProxy;
			private var _attributes:IList;
			private var _internalLabelWidth:Number = 130;
			private var _presenter:AttributePresenter;
			private var _visited:Boolean;
			private var _approved:Boolean;
			
			protected function creationCompleteHandler(event:FlexEvent):void {
				initPresenter();
			}

			protected function initPresenter():void {
				presenter = new AttributePresenter(this);
			}
			
			/**
			 * Getters and setters
			 */
			[Bindable]
			public function get direction():String {
				return _direction;
			}

			public function set direction(value:String):void {
				_direction = value;
			}
			
			[Bindable(event="attributeModelObjectChange")]
			public function get attributeUIModelObject():AttributeModelObjectProxy {
				return _attributeUIModelObject;
			}
			
			[Bindable(event="attributeModelObjectChange")]
			public function get attributeDefinition():AttributeDefinitionProxy {
				return _attributeUIModelObject == null ? null: _attributeUIModelObject.attributeDefinition;
			}
			
			public function set attributeUIModelObject(value:AttributeModelObjectProxy):void {
				_attributeUIModelObject = value;
				dispatchEvent(new Event("attributeModelObjectChange"));
			}
			
			[Bindable(event="attributeModelObjectChange")]
			public function get insideTable():Boolean {
				return attributeUIModelObject == null ? false: UIModelObjectProxy(attributeUIModelObject).parent is TableProxy;
			}
			
			[Bindable]
			public function get modelVersion():ModelVersionProxy {
				return _modelVersion;
			}
			
			public function set modelVersion(value:ModelVersionProxy):void {
				_modelVersion = value;
			}
			
			[Bindable]
			public function get parentEntity():EntityProxy {
				return _parentEntity;
			}
			
			public function set parentEntity(value:EntityProxy):void {
				_parentEntity = value;
			}
			
			[Bindable]
			public function get attribute():AttributeProxy {
				return _attribute;
			}
			
			public function set attribute(value:AttributeProxy):void {
				_attribute = value;
			}

			[Bindable]
			public function get attributes():IList {
				return _attributes;
			}
			
			public function set attributes(value:IList):void {
				_attributes = value;
			}
			
			public function get presenter():AttributePresenter {
				return _presenter;
			}

			public function set presenter(value:AttributePresenter):void {
				_presenter = value;
			}

			public function get visited():Boolean {
				return _visited;
			}

			public function set visited(value:Boolean):void {
				_visited = value;
			}
			
			public function get approved():Boolean {
				return _approved;
			}
			
			public function set approved(value:Boolean):void {
				_approved = value;
				if(value) {
					UIUtil.addStyleName(this, STYLE_NAME_APPROVED);
				} else {
					UIUtil.removeStyleName(this, STYLE_NAME_APPROVED);
				}
			}
	
		]]>
	</fx:Script>
	
	
</s:BorderContainer>
