<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx"
				dataChange="dataChangeHandler(event)" 
				autoDrawBackground="false"
				creationComplete="creationCompleteHandler(event)"
				width="100%"
				>
	
	<fx:Script>
		<![CDATA[
			import mx.binding.utils.BindingUtils;
			import mx.collections.IList;
			import mx.core.IVisualElement;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			
			import org.openforis.collect.metamodel.proxy.AttributeDefinitionProxy;
			import org.openforis.collect.metamodel.proxy.CodeAttributeDefinitionProxy;
			import org.openforis.collect.metamodel.proxy.CoordinateAttributeDefinitionProxy;
			import org.openforis.collect.metamodel.proxy.ModelVersionProxy;
			import org.openforis.collect.metamodel.proxy.TaxonAttributeDefinitionProxy;
			import org.openforis.collect.metamodel.ui.proxy.FieldProxy;
			import org.openforis.collect.metamodel.ui.proxy.FormSectionProxy;
			import org.openforis.collect.metamodel.ui.proxy.TableProxy;
			import org.openforis.collect.model.proxy.EntityProxy;
			import org.openforis.collect.model.proxy.NodeProxy;
			import org.openforis.collect.util.UIUtil;
			
			private var _parentEntity:EntityProxy;
			private var _modelVersion:ModelVersionProxy;
			private var _labelWidth:Number = 150;
			private var _occupyEntirePage:Boolean = false;
			
			protected function creationCompleteHandler(event:FlexEvent):void {
				BindingUtils.bindSetter(updateTablesMaxHeight, this, "height");
				BindingUtils.bindSetter(updateTablesMaxWidth, this, "width");
			}
			
			override protected function createChildren():void {
				super.createChildren();
				if(data != null) {
					var formItem:CollectFormItem;
					if(data is FieldProxy) {
						formItem = createAttributeFormItem(FieldProxy(data));
					} else if(data is TableProxy) {
						formItem = createTableFormItem(TableProxy(data));
					} else if(data is FormSectionProxy) {
						formItem = createFormSectionFormItem(FormSectionProxy(data));
					} else {
						throw new Error("Unsupported child type: " + data.toString());
					}
					addElement(formItem);
					BindingUtils.bindProperty(formItem, "parentEntity", this, "entity");
					BindingUtils.bindProperty(formItem, "occupyEntirePage", this, "occupyEntirePage");
				}
			}
			
			protected function dataChangeHandler(event:FlexEvent):void {
				removeAllElements();
				initialized = false;
				initialize();
			}
			
			protected function updateTablesMaxHeight(value:Number):void {
				var maxAvailableHeight:Number = UIUtil.getMaxAvailableHeight(UIComponent(parentDocument));
				if(!isNaN(maxAvailableHeight)) {
					for(var i:int = 0; i < numElements; i++) {
						var el:IVisualElement = getElementAt(i);
						if(el is TableFormItem) {
							TableFormItem(el).maxHeight = maxAvailableHeight;
						}
					}
				}
			}
			
			protected function updateTablesMaxWidth(value:Number):void {
				var maxAvailableWidth:Number = UIUtil.getMaxAvailableWidth(UIComponent(parentDocument));
				if(!isNaN(maxAvailableWidth)) {
					if ( ! occupyEntirePage ) {
						maxAvailableWidth -= 15;
					}
					for(var i:int = 0; i < numElements; i++) {
						var el:IVisualElement = getElementAt(i);
						if(el is TableFormItem) {
							TableFormItem(el).maxWidth = maxAvailableWidth;
						}
					}
				}
			}

			public function createAttributeFormItem(field:FieldProxy):AttributeFormItem {
				var def:AttributeDefinitionProxy = field.attributeDefinition;
				var parentLayout:String = def.parentLayout;
				var formItem:AttributeFormItem = null;
				if(def is CodeAttributeDefinitionProxy) {
					formItem = new CodeAttributeFormItem();
				} else if(def is CoordinateAttributeDefinitionProxy || def is TaxonAttributeDefinitionProxy) {
					formItem = new CompositeAttributeFormItem();
				} else if(def.multiple) {
					if(parentLayout == UIUtil.LAYOUT_TABLE){
						formItem = new MultipleAttributeDataGroupFormItem();
					} else {
						formItem = new MultipleAttributeFormItem();
					}
				} else {
					formItem = new SingleAttributeFormItem();
				}
				formItem.field = field;
				formItem.labelWidth = labelWidth;
				return formItem;
			}
			
			private function createTableFormItem(param0:TableProxy):TableFormItem {
				var result:TableFormItem = new TableFormItem();
				result.table = TableProxy(data);
				return result;
			}
			
			private function createFormSectionFormItem(param0:FormSectionProxy):CollectFormItem {
				var formItem:FormSectionFormItem = new FormSectionFormItem();
				BindingUtils.bindProperty(formItem, "modelVersion", this, "modelVersion");
				return formItem;
			}
			

			[Bindable]
			public function get parentEntity():EntityProxy {
				return _parentEntity;
			}
			
			public function set parentEntity(value:EntityProxy):void {
				_parentEntity = value;
				dispatchEvent(new Event("parentEntityChange"));
			}
			
			[Bindable(event="parentEntityChange")]
			public function get entity():EntityProxy {
				if ( parentEntity == null ) {
					return null;
				} else {
					var children:IList = parentEntity.getChildren();
					if ( children.length == 1 ) {
						var firstChild:NodeProxy = children.getItemAt(0) as NodeProxy;
						if ( firstChild is EntityProxy && ! firstChild.definition.multiple ) {
							//single entity
							return EntityProxy(firstChild);
						}
					}
					return parentEntity;
				}
			}
			
			[Bindable]
			public function get modelVersion():ModelVersionProxy {
				return _modelVersion;
			}
			
			public function set modelVersion(value:ModelVersionProxy):void {
				_modelVersion = value;
			}
			
			[Bindable]
			public function get labelWidth():Number {
				return _labelWidth;
			}
			
			public function set labelWidth(value:Number):void {
				_labelWidth = value;
			}

			[Bindable]
			public function get occupyEntirePage():Boolean {
				return _occupyEntirePage;
			}

			public function set occupyEntirePage(value:Boolean):void {
				_occupyEntirePage = value;
			}
			

		]]>
	</fx:Script>

</s:ItemRenderer>
